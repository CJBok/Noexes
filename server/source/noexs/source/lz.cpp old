#include <switch.h>
/*************************************************************************
* LZ_Compress() - Compress a block of data using an LZ8 coder.
*  in     - Input (uncompressed) buffer.
*  out    - Output (compressed) buffer. This buffer must be 1/8 larger
*           than the input buffer to cater for the worst case. 
*  insize - Number of input bytes.
* The function returns the size of the compressed data.
*************************************************************************/
int LZ_Compress( const unsigned char *in, unsigned char *out, unsigned int insize )
{
    unsigned int  inpos, outpos;
    struct marker_t {
        unsigned int back: 4;
        unsigned int front : 4;
    } marker = {0};
    #define MAXRANGE 16
    /* Do we have anything to compress? */
    if (insize < 1) {
        return 0;
    }
    /* Start of compression */
    inpos = 0;
    outpos = 0;
    /* Main compression loop */
    do
    {
        marker.front = 8;
        for (int front = 0; front <= 8; front++) {
            for (int back = 1; back <= MAXRANGE; back++) {
                if (inpos - back < 0) break;
                if ((*reinterpret_cast<u64 *>(in[inpos - back]) & (0xFFFFFFFFFFFFFFFF << 8 * front)) == (*reinterpret_cast<u64 *>(in[inpos]) & (0xFFFFFFFFFFFFFFFF << 8 * front))) {
                    marker.front = front;
                    marker.back = back - 1;
                    break;
                }
            }
        }
        *reinterpret_cast<marker_t *>(out[outpos]) = marker;
        outpos += sizeof(marker_t);
        *reinterpret_cast<u64 *>(out[outpos]) = *reinterpret_cast<u64 *>(in[inpos]);
        outpos += marker.front;
        inpos += 8;
    } while ( inpos < insize );
    return outpos;
}
/*************************************************************************
* LZ_Uncompress() - Uncompress a block of data using an LZ8 decoder.
*  in      - Input (compressed) buffer.
*  out     - Output (uncompressed) buffer. This buffer must be large
*            enough to hold the uncompressed data.
*  insize  - Number of input bytes.
**************************************************************************/
int LZ_Uncompress( const unsigned char *in, unsigned char *out, unsigned int insize )
{
    unsigned int  inpos, outpos;
    struct marker_t {
        unsigned int back: 4;
        unsigned int front : 4;
    } marker = {0};
    /* Do we have anything to uncompress? */
    if( insize < 1 )
    {
        return 0;
    }
    /* Main decompression loop */
    marker = *reinterpret_cast<marker_t *>(in[0]);
    inpos = 1;
    outpos = 0;
    do
    {   if (marker.front == 8){
            *reinterpret_cast<u64 *>(out[outpos]) = *reinterpret_cast<u64 *>(in[inpos]);
        } else {
            *reinterpret_cast<u64 *>(out[outpos]) = (*reinterpret_cast<u64 *>(in[inpos]) & (0xFFFFFFFFFFFFFFFF >> 8 * (8 - marker.front))) | (*reinterpret_cast<u64 *>(out[outpos - (marker.back+1)*8]) & (0xFFFFFFFFFFFFFFFF << 8 * marker.front));
        };
        inpos += marker.front;
        marker = *reinterpret_cast<marker_t *>(in[0]);
        inpos ++;
        outpos += 8;
    }
    while( inpos < insize );
    return outpos;
}
